# Workflow CI/CD Matrix Ultra-Professionnel pour Arkalia Metrics Collector
# Teste sur Windows, macOS, Linux + Python 3.10, 3.11, 3.12
# Avec tests, couverture, sécurité et qualité

name: CI_CD_Matrix_Ultra_Pro

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: "3.10"
  PIP_CACHE_DIR: ~/.cache/pip
  PYTHONUNBUFFERED: 1

permissions:
  contents: read

jobs:
  # ========================================
  # VALIDATION PRELIMINAIRE
  # ========================================
  validate:
    name: "Validation & Structure"
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      should-continue: ${{ steps.check-validation.outputs.should-continue }}

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Validation Structure"
        id: check-validation
        run: |
          echo "VALIDATION DE LA STRUCTURE ARKALIA METRICS COLLECTOR"
          echo "====================================================="

          # Vérification des dossiers critiques
          required_dirs=("src/arkalia_metrics_collector" "tests" "docs" "config")
          for dir in "${required_dirs[@]}"; do
            if [ -d "$dir" ]; then
              echo "SUCCESS $dir - Présent"
            else
              echo "ERROR $dir - MANQUANT"
              exit 1
            fi
          done

          # Vérification des fichiers critiques
          required_files=("pyproject.toml" "README.md" "LICENSE")
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "SUCCESS $file - Présent"
            else
              echo "ERROR $file - MANQUANT"
              exit 1
            fi
          done

          echo "SUCCESS Structure validée - Tests autorisés"
          echo "should-continue=true" >> $GITHUB_OUTPUT

      - name: "Metriques Projet"
        run: |
          echo "MÉTRIQUES ARKALIA METRICS COLLECTOR"
          echo "===================================="
          echo "Fichiers Python: $(find . -name '*.py' -not -path '*/.venv/*' -not -path '*/__pycache__/*' | wc -l)"
          echo "Tests: $(find tests -name '*.py' | wc -l)"
          echo "Documentation: $(find docs -name '*.md' | wc -l)"

  # ========================================
  # TESTS MATRIX MULTI-PLATEFORME
  # ========================================
  test-matrix:
    name: "Tests Matrix - ${{ matrix.os }} Python ${{ matrix.python-version }}"
    needs: validate
    if: needs.validate.outputs.should-continue == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v5

      - name: "Setup Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Cache pip"
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: "Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: "Run Tests"
        run: |
          pytest tests/ -v --cov=arkalia_metrics_collector --cov-report=xml --cov-report=html

      - name: "Upload Coverage"
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # ========================================
  # QUALITÉ DU CODE
  # ========================================
  code-quality:
    name: "Qualité du Code"
    needs: validate
    if: needs.validate.outputs.should-continue == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v5

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: "Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: "Black Format Check"
        run: black --check --diff .

      - name: "Ruff Linting"
        run: ruff check .

      - name: "MyPy Type Check"
        run: mypy src/arkalia_metrics_collector/

      - name: "Import Sorting Check"
        run: isort --check-only --diff .

  # ========================================
  # SÉCURITÉ
  # ========================================
  security:
    name: "Sécurité"
    needs: validate
    if: needs.validate.outputs.should-continue == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v5

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: "Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: "Create Logs Directory"
        run: |
          mkdir -p logs

      - name: "Bandit Security Scan"
        run: |
          bandit -r src/arkalia_metrics_collector/ -f json -o logs/bandit_report.json || true
          bandit -r src/arkalia_metrics_collector/ -f txt -o logs/bandit_report.txt

      - name: "Upload Security Report"
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: logs/bandit_report.*

  # ========================================
  # BUILD & PACKAGE
  # ========================================
  build:
    name: "Build Package"
    needs: [validate, test-matrix, code-quality, security]
    if: needs.validate.outputs.should-continue == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v5

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: "Install Build Tools"
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: "Build Package"
        run: python -m build

      - name: "Upload Build Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # ========================================
  # DÉPLOIEMENT
  # ========================================
  deploy:
    name: "Deploy to PyPI"
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    # environment: production  # Temporairement désactivé

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v5

      - name: "Download Build Artifacts"
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: "Publish to PyPI"
        run: |
          echo "${{ secrets.PYPI_API_TOKEN }}" | twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
