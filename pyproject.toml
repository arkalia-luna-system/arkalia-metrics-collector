[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "arkalia-metrics-collector"
version = "1.0.0"
description = "Professional metrics collection and analysis for Python projects"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Arkalia Luna System", email = "contact@arkalia-luna.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
]
requires-python = ">=3.8"
dependencies = [
    "pyyaml>=6.0",
    "click>=8.0",
    "pytest>=7.0",
    "pathlib2>=2.3.7; python_version < '3.4'",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "coverage>=7.0.0",
    "safety>=2.0.0",
    "pip-audit>=2.0.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]
security = [
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pip-audit>=2.0.0",
]

[project.scripts]
arkalia-metrics = "arkalia_metrics_collector.cli.main:cli"

[project.urls]
Homepage = "https://github.com/arkalia-luna-system/arkalia-metrics-collector"
Repository = "https://github.com/arkalia-luna-system/arkalia-metrics-collector"
Documentation = "https://github.com/arkalia-luna-system/arkalia-metrics-collector#readme"
Issues = "https://github.com/arkalia-luna-system/arkalia-metrics-collector/issues"

[tool.setuptools.packages.find]
where = ["src"]

# Configuration Black (formatage)
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  \._.*
  | \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
  | archive
  | backups
  | logs
  | htmlcov
)/
'''

# Configuration Ruff (linting + imports)
[tool.ruff]
target-version = "py310"
line-length = 88
exclude = [
    ".venv",
    "venv",
    "__pycache__",
    ".git",
    ".mypy_cache",
    "build",
    "dist",
    "*.egg-info",
    "._*",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.isort]
known-first-party = ["arkalia_metrics_collector"]

# Configuration pytest
[tool.pytest.ini_options]
pythonpath = ["."]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
norecursedirs = [".git", "archive", "backups", "logs", ".venv", "venv", "__pycache__"]
minversion = "6.0"
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--cache-clear",
    "--import-mode=importlib",
    "--maxfail=10",
    "--durations=10",
    "--no-cov-on-fail",
]
markers = [
    "fast: marks tests as fast (deselect with '-m \"not fast\"')",
    "medium: marks tests as medium speed (deselect with '-m \"not medium\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "benchmark: marks tests as benchmark tests",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "security: marks tests as security tests",
    "timeout: marks tests with timeout",
    "no_cov: marks tests that should not use coverage",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
]

# Configuration MyPy
[tool.mypy]
python_version = "3.10"
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = false
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_no_return = true
warn_unreachable = true
strict_equality = false
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
color_output = true
error_summary = true
exclude = [
    "tests/",
    "archive/",
    "backups/",
    "logs/",
    ".venv/",
    "venv/",
]

# Configuration Bandit
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "archive", "backups", "logs"]
skips = ["B101", "B601", "B603", "B604", "B605", "B606", "B607", "B608", "B609", "B610"]
targets = ["arkalia_metrics_collector", "scripts", "tools"]
recursive = true
verbose = true
output_format = "json"
output_file = "logs/bandit_report.json"

# Configuration Coverage
[tool.coverage.run]
source = ["arkalia_metrics_collector"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/archive/*",
    "*/backups/*",
    "*/logs/*",
    "*/htmlcov/*",
]
branch = true
relative_files = true
data_file = ".coverage"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
